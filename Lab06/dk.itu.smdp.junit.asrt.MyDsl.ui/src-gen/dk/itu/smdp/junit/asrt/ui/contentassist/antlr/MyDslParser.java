/*
* generated by Xtext
*/
package dk.itu.smdp.junit.asrt.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import dk.itu.smdp.junit.asrt.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected dk.itu.smdp.junit.asrt.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		dk.itu.smdp.junit.asrt.ui.contentassist.antlr.internal.InternalMyDslParser result = new dk.itu.smdp.junit.asrt.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpAccess().getAlternatives(), "rule__Exp__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getSimpleTypeEnumAccess().getAlternatives(), "rule__SimpleTypeEnum__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_3(), "rule__Model__Group_3__0");
					put(grammarAccess.getModelAccess().getGroup_3_3(), "rule__Model__Group_3_3__0");
					put(grammarAccess.getAssertMethodAccess().getGroup(), "rule__AssertMethod__Group__0");
					put(grammarAccess.getAssertMethodAccess().getGroup_6(), "rule__AssertMethod__Group_6__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getUOpAccess().getGroup(), "rule__UOp__Group__0");
					put(grammarAccess.getNULLAccess().getGroup(), "rule__NULL__Group__0");
					put(grammarAccess.getId0Access().getGroup(), "rule__Id0__Group__0");
					put(grammarAccess.getBOp_ImplAccess().getGroup(), "rule__BOp_Impl__Group__0");
					put(grammarAccess.getBOpMethodAccess().getGroup(), "rule__BOpMethod__Group__0");
					put(grammarAccess.getFunCallAccess().getGroup(), "rule__FunCall__Group__0");
					put(grammarAccess.getFunCallAccess().getGroup_4(), "rule__FunCall__Group_4__0");
					put(grammarAccess.getFunCallAccess().getGroup_4_3(), "rule__FunCall__Group_4_3__0");
					put(grammarAccess.getModelAccess().getAssertMethodsAssignment_3_2(), "rule__Model__AssertMethodsAssignment_3_2");
					put(grammarAccess.getModelAccess().getAssertMethodsAssignment_3_3_1(), "rule__Model__AssertMethodsAssignment_3_3_1");
					put(grammarAccess.getAssertMethodAccess().getNameAssignment_1(), "rule__AssertMethod__NameAssignment_1");
					put(grammarAccess.getAssertMethodAccess().getParamsAssignment_5(), "rule__AssertMethod__ParamsAssignment_5");
					put(grammarAccess.getAssertMethodAccess().getParamsAssignment_6_1(), "rule__AssertMethod__ParamsAssignment_6_1");
					put(grammarAccess.getAssertMethodAccess().getBodyExprAssignment_9(), "rule__AssertMethod__BodyExprAssignment_9");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_4(), "rule__Parameter__TypeAssignment_4");
					put(grammarAccess.getUOpAccess().getOperatorAssignment_3(), "rule__UOp__OperatorAssignment_3");
					put(grammarAccess.getUOpAccess().getExprAssignment_5(), "rule__UOp__ExprAssignment_5");
					put(grammarAccess.getId0Access().getNameAssignment_2(), "rule__Id0__NameAssignment_2");
					put(grammarAccess.getBOp_ImplAccess().getOperatorAssignment_3(), "rule__BOp_Impl__OperatorAssignment_3");
					put(grammarAccess.getBOp_ImplAccess().getLexprAssignment_5(), "rule__BOp_Impl__LexprAssignment_5");
					put(grammarAccess.getBOp_ImplAccess().getRexprAssignment_7(), "rule__BOp_Impl__RexprAssignment_7");
					put(grammarAccess.getBOpMethodAccess().getOperatorAssignment_3(), "rule__BOpMethod__OperatorAssignment_3");
					put(grammarAccess.getBOpMethodAccess().getLexprAssignment_5(), "rule__BOpMethod__LexprAssignment_5");
					put(grammarAccess.getBOpMethodAccess().getRexprAssignment_7(), "rule__BOpMethod__RexprAssignment_7");
					put(grammarAccess.getFunCallAccess().getNameAssignment_2(), "rule__FunCall__NameAssignment_2");
					put(grammarAccess.getFunCallAccess().getArgAssignment_4_2(), "rule__FunCall__ArgAssignment_4_2");
					put(grammarAccess.getFunCallAccess().getArgAssignment_4_3_1(), "rule__FunCall__ArgAssignment_4_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			dk.itu.smdp.junit.asrt.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (dk.itu.smdp.junit.asrt.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
