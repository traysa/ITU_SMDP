/*
* generated by Xtext
*/
package dk.itu.smdp.junit.asrt.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDsl2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAssertMethodsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssertMethodsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssertMethodsAssertMethodParserRuleCall_3_2_0 = (RuleCall)cAssertMethodsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cAssertMethodsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cAssertMethodsAssertMethodParserRuleCall_3_3_1_0 = (RuleCall)cAssertMethodsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} "Model" "{" ("assertMethods" "{" assertMethods+=AssertMethod ("," assertMethods+=AssertMethod)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{Model} "Model" "{" ("assertMethods" "{" assertMethods+=AssertMethod ("," assertMethods+=AssertMethod)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//"Model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("assertMethods" "{" assertMethods+=AssertMethod ("," assertMethods+=AssertMethod)* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"assertMethods"
		public Keyword getAssertMethodsKeyword_3_0() { return cAssertMethodsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//assertMethods+=AssertMethod
		public Assignment getAssertMethodsAssignment_3_2() { return cAssertMethodsAssignment_3_2; }

		//AssertMethod
		public RuleCall getAssertMethodsAssertMethodParserRuleCall_3_2_0() { return cAssertMethodsAssertMethodParserRuleCall_3_2_0; }

		//("," assertMethods+=AssertMethod)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//assertMethods+=AssertMethod
		public Assignment getAssertMethodsAssignment_3_3_1() { return cAssertMethodsAssignment_3_3_1; }

		//AssertMethod
		public RuleCall getAssertMethodsAssertMethodParserRuleCall_3_3_1_0() { return cAssertMethodsAssertMethodParserRuleCall_3_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUOpParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNULLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cId0ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOp_ImplParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBOpMethodParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFunCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Exp:
		//	UOp | NULL | Id0 | BOp_Impl | BOpMethod | FunCall;
		public ParserRule getRule() { return rule; }

		//UOp | NULL | Id0 | BOp_Impl | BOpMethod | FunCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//UOp
		public RuleCall getUOpParserRuleCall_0() { return cUOpParserRuleCall_0; }

		//NULL
		public RuleCall getNULLParserRuleCall_1() { return cNULLParserRuleCall_1; }

		//Id0
		public RuleCall getId0ParserRuleCall_2() { return cId0ParserRuleCall_2; }

		//BOp_Impl
		public RuleCall getBOp_ImplParserRuleCall_3() { return cBOp_ImplParserRuleCall_3; }

		//BOpMethod
		public RuleCall getBOpMethodParserRuleCall_4() { return cBOpMethodParserRuleCall_4; }

		//FunCall
		public RuleCall getFunCallParserRuleCall_5() { return cFunCallParserRuleCall_5; }
	}

	public class AssertMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssertMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cParamsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParamsParameterParserRuleCall_5_0 = (RuleCall)cParamsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParamsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_6_1_0 = (RuleCall)cParamsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cBodyExprKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyExprAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyExprExpParserRuleCall_9_0 = (RuleCall)cBodyExprAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AssertMethod:
		//	"AssertMethod" name=EString "{" "params" "{" params+=Parameter ("," params+=Parameter)* "}" "bodyExpr" bodyExpr=Exp
		//	"}";
		public ParserRule getRule() { return rule; }

		//"AssertMethod" name=EString "{" "params" "{" params+=Parameter ("," params+=Parameter)* "}" "bodyExpr" bodyExpr=Exp "}"
		public Group getGroup() { return cGroup; }

		//"AssertMethod"
		public Keyword getAssertMethodKeyword_0() { return cAssertMethodKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"params"
		public Keyword getParamsKeyword_3() { return cParamsKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_5() { return cParamsAssignment_5; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0() { return cParamsParameterParserRuleCall_5_0; }

		//("," params+=Parameter)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_6_1() { return cParamsAssignment_6_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_6_1_0() { return cParamsParameterParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"bodyExpr"
		public Keyword getBodyExprKeyword_8() { return cBodyExprKeyword_8; }

		//bodyExpr=Exp
		public Assignment getBodyExprAssignment_9() { return cBodyExprAssignment_9; }

		//Exp
		public RuleCall getBodyExprExpParserRuleCall_9_0() { return cBodyExprExpParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeSimpleTypeEnumEnumRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameter:
		//	"Parameter" name=EString "{" "type" type=SimpleTypeEnum "}";
		public ParserRule getRule() { return rule; }

		//"Parameter" name=EString "{" "type" type=SimpleTypeEnum "}"
		public Group getGroup() { return cGroup; }

		//"Parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//type=SimpleTypeEnum
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//SimpleTypeEnum
		public RuleCall getTypeSimpleTypeEnumEnumRuleCall_4_0() { return cTypeSimpleTypeEnumEnumRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class UOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorEStringParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Keyword cExprKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExpParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UOp:
		//	"UOp" "{" "operator" operator=EString "expr" expr=Exp "}";
		public ParserRule getRule() { return rule; }

		//"UOp" "{" "operator" operator=EString "expr" expr=Exp "}"
		public Group getGroup() { return cGroup; }

		//"UOp"
		public Keyword getUOpKeyword_0() { return cUOpKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"operator"
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }

		//operator=EString
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//EString
		public RuleCall getOperatorEStringParserRuleCall_3_0() { return cOperatorEStringParserRuleCall_3_0; }

		//"expr"
		public Keyword getExprKeyword_4() { return cExprKeyword_4; }

		//expr=Exp
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Exp
		public RuleCall getExprExpParserRuleCall_5_0() { return cExprExpParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NULL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNULLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNULLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NULL:
		//	{NULL} "NULL";
		public ParserRule getRule() { return rule; }

		//{NULL} "NULL"
		public Group getGroup() { return cGroup; }

		//{NULL}
		public Action getNULLAction_0() { return cNULLAction_0; }

		//"NULL"
		public Keyword getNULLKeyword_1() { return cNULLKeyword_1; }
	}

	public class Id0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Id0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Id0 returns Id:
		//	{Id} "Id" name=EString;
		public ParserRule getRule() { return rule; }

		//{Id} "Id" name=EString
		public Group getGroup() { return cGroup; }

		//{Id}
		public Action getIdAction_0() { return cIdAction_0; }

		//"Id"
		public Keyword getIdKeyword_1() { return cIdKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class BOp_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOp_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorEStringParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Keyword cLexprKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLexprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLexprExpParserRuleCall_5_0 = (RuleCall)cLexprAssignment_5.eContents().get(0);
		private final Keyword cRexprKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRexprAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRexprExpParserRuleCall_7_0 = (RuleCall)cRexprAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BOp_Impl returns BOp:
		//	"BOp" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}";
		public ParserRule getRule() { return rule; }

		//"BOp" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}"
		public Group getGroup() { return cGroup; }

		//"BOp"
		public Keyword getBOpKeyword_0() { return cBOpKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"operator"
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }

		//operator=EString
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//EString
		public RuleCall getOperatorEStringParserRuleCall_3_0() { return cOperatorEStringParserRuleCall_3_0; }

		//"lexpr"
		public Keyword getLexprKeyword_4() { return cLexprKeyword_4; }

		//lexpr=Exp
		public Assignment getLexprAssignment_5() { return cLexprAssignment_5; }

		//Exp
		public RuleCall getLexprExpParserRuleCall_5_0() { return cLexprExpParserRuleCall_5_0; }

		//"rexpr"
		public Keyword getRexprKeyword_6() { return cRexprKeyword_6; }

		//rexpr=Exp
		public Assignment getRexprAssignment_7() { return cRexprAssignment_7; }

		//Exp
		public RuleCall getRexprExpParserRuleCall_7_0() { return cRexprExpParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class BOpMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOpMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBOpMethodKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOperatorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorEStringParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Keyword cLexprKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLexprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLexprExpParserRuleCall_5_0 = (RuleCall)cLexprAssignment_5.eContents().get(0);
		private final Keyword cRexprKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRexprAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRexprExpParserRuleCall_7_0 = (RuleCall)cRexprAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//BOpMethod:
		//	"BOpMethod" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}";
		public ParserRule getRule() { return rule; }

		//"BOpMethod" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}"
		public Group getGroup() { return cGroup; }

		//"BOpMethod"
		public Keyword getBOpMethodKeyword_0() { return cBOpMethodKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"operator"
		public Keyword getOperatorKeyword_2() { return cOperatorKeyword_2; }

		//operator=EString
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//EString
		public RuleCall getOperatorEStringParserRuleCall_3_0() { return cOperatorEStringParserRuleCall_3_0; }

		//"lexpr"
		public Keyword getLexprKeyword_4() { return cLexprKeyword_4; }

		//lexpr=Exp
		public Assignment getLexprAssignment_5() { return cLexprAssignment_5; }

		//Exp
		public RuleCall getLexprExpParserRuleCall_5_0() { return cLexprExpParserRuleCall_5_0; }

		//"rexpr"
		public Keyword getRexprKeyword_6() { return cRexprKeyword_6; }

		//rexpr=Exp
		public Assignment getRexprAssignment_7() { return cRexprAssignment_7; }

		//Exp
		public RuleCall getRexprExpParserRuleCall_7_0() { return cRexprExpParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FunCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cArgKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cArgAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cArgExpParserRuleCall_4_2_0 = (RuleCall)cArgAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cArgAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cArgExpParserRuleCall_4_3_1_0 = (RuleCall)cArgAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//FunCall:
		//	{FunCall} "FunCall" name=EString "{" ("arg" "{" arg+=Exp ("," arg+=Exp)* "}")? "}";
		public ParserRule getRule() { return rule; }

		//{FunCall} "FunCall" name=EString "{" ("arg" "{" arg+=Exp ("," arg+=Exp)* "}")? "}"
		public Group getGroup() { return cGroup; }

		//{FunCall}
		public Action getFunCallAction_0() { return cFunCallAction_0; }

		//"FunCall"
		public Keyword getFunCallKeyword_1() { return cFunCallKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("arg" "{" arg+=Exp ("," arg+=Exp)* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"arg"
		public Keyword getArgKeyword_4_0() { return cArgKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//arg+=Exp
		public Assignment getArgAssignment_4_2() { return cArgAssignment_4_2; }

		//Exp
		public RuleCall getArgExpParserRuleCall_4_2_0() { return cArgExpParserRuleCall_4_2_0; }

		//("," arg+=Exp)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//arg+=Exp
		public Assignment getArgAssignment_4_3_1() { return cArgAssignment_4_3_1; }

		//Exp
		public RuleCall getArgExpParserRuleCall_4_3_1_0() { return cArgExpParserRuleCall_4_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	public class SimpleTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBOOLEANKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOBJECTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOBJECTOBJECTKeyword_1_0 = (Keyword)cOBJECTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLEDOUBLEKeyword_2_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLONGLONGKeyword_3_0 = (Keyword)cLONGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSHORTSHORTKeyword_4_0 = (Keyword)cSHORTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINTINTKeyword_5_0 = (Keyword)cINTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFLOATFLOATKeyword_6_0 = (Keyword)cFLOATEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cCHARCHARKeyword_7_0 = (Keyword)cCHAREnumLiteralDeclaration_7.eContents().get(0);
		
		//enum SimpleTypeEnum:
		//	BOOLEAN | OBJECT | DOUBLE | LONG | SHORT | INT | FLOAT | CHAR;
		public EnumRule getRule() { return rule; }

		//BOOLEAN | OBJECT | DOUBLE | LONG | SHORT | INT | FLOAT | CHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }

		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_0_0() { return cBOOLEANBOOLEANKeyword_0_0; }

		//OBJECT
		public EnumLiteralDeclaration getOBJECTEnumLiteralDeclaration_1() { return cOBJECTEnumLiteralDeclaration_1; }

		//"OBJECT"
		public Keyword getOBJECTOBJECTKeyword_1_0() { return cOBJECTOBJECTKeyword_1_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_2() { return cDOUBLEEnumLiteralDeclaration_2; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_2_0() { return cDOUBLEDOUBLEKeyword_2_0; }

		//LONG
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_3() { return cLONGEnumLiteralDeclaration_3; }

		//"LONG"
		public Keyword getLONGLONGKeyword_3_0() { return cLONGLONGKeyword_3_0; }

		//SHORT
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_4() { return cSHORTEnumLiteralDeclaration_4; }

		//"SHORT"
		public Keyword getSHORTSHORTKeyword_4_0() { return cSHORTSHORTKeyword_4_0; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_5() { return cINTEnumLiteralDeclaration_5; }

		//"INT"
		public Keyword getINTINTKeyword_5_0() { return cINTINTKeyword_5_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_6() { return cFLOATEnumLiteralDeclaration_6; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_6_0() { return cFLOATFLOATKeyword_6_0; }

		//CHAR
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_7() { return cCHAREnumLiteralDeclaration_7; }

		//"CHAR"
		public Keyword getCHARCHARKeyword_7_0() { return cCHARCHARKeyword_7_0; }
	}
	
	private ModelElements pModel;
	private ExpElements pExp;
	private AssertMethodElements pAssertMethod;
	private EStringElements pEString;
	private ParameterElements pParameter;
	private SimpleTypeEnumElements unknownRuleSimpleTypeEnum;
	private UOpElements pUOp;
	private NULLElements pNULL;
	private Id0Elements pId0;
	private BOp_ImplElements pBOp_Impl;
	private BOpMethodElements pBOpMethod;
	private FunCallElements pFunCall;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDsl2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.smdp.junit.asrt.MyDsl2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} "Model" "{" ("assertMethods" "{" assertMethods+=AssertMethod ("," assertMethods+=AssertMethod)* "}")? "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Exp:
	//	UOp | NULL | Id0 | BOp_Impl | BOpMethod | FunCall;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//AssertMethod:
	//	"AssertMethod" name=EString "{" "params" "{" params+=Parameter ("," params+=Parameter)* "}" "bodyExpr" bodyExpr=Exp
	//	"}";
	public AssertMethodElements getAssertMethodAccess() {
		return (pAssertMethod != null) ? pAssertMethod : (pAssertMethod = new AssertMethodElements());
	}
	
	public ParserRule getAssertMethodRule() {
		return getAssertMethodAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Parameter:
	//	"Parameter" name=EString "{" "type" type=SimpleTypeEnum "}";
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//enum SimpleTypeEnum:
	//	BOOLEAN | OBJECT | DOUBLE | LONG | SHORT | INT | FLOAT | CHAR;
	public SimpleTypeEnumElements getSimpleTypeEnumAccess() {
		return (unknownRuleSimpleTypeEnum != null) ? unknownRuleSimpleTypeEnum : (unknownRuleSimpleTypeEnum = new SimpleTypeEnumElements());
	}
	
	public EnumRule getSimpleTypeEnumRule() {
		return getSimpleTypeEnumAccess().getRule();
	}

	//UOp:
	//	"UOp" "{" "operator" operator=EString "expr" expr=Exp "}";
	public UOpElements getUOpAccess() {
		return (pUOp != null) ? pUOp : (pUOp = new UOpElements());
	}
	
	public ParserRule getUOpRule() {
		return getUOpAccess().getRule();
	}

	//NULL:
	//	{NULL} "NULL";
	public NULLElements getNULLAccess() {
		return (pNULL != null) ? pNULL : (pNULL = new NULLElements());
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}

	//Id0 returns Id:
	//	{Id} "Id" name=EString;
	public Id0Elements getId0Access() {
		return (pId0 != null) ? pId0 : (pId0 = new Id0Elements());
	}
	
	public ParserRule getId0Rule() {
		return getId0Access().getRule();
	}

	//BOp_Impl returns BOp:
	//	"BOp" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}";
	public BOp_ImplElements getBOp_ImplAccess() {
		return (pBOp_Impl != null) ? pBOp_Impl : (pBOp_Impl = new BOp_ImplElements());
	}
	
	public ParserRule getBOp_ImplRule() {
		return getBOp_ImplAccess().getRule();
	}

	//BOpMethod:
	//	"BOpMethod" "{" "operator" operator=EString "lexpr" lexpr=Exp "rexpr" rexpr=Exp "}";
	public BOpMethodElements getBOpMethodAccess() {
		return (pBOpMethod != null) ? pBOpMethod : (pBOpMethod = new BOpMethodElements());
	}
	
	public ParserRule getBOpMethodRule() {
		return getBOpMethodAccess().getRule();
	}

	//FunCall:
	//	{FunCall} "FunCall" name=EString "{" ("arg" "{" arg+=Exp ("," arg+=Exp)* "}")? "}";
	public FunCallElements getFunCallAccess() {
		return (pFunCall != null) ? pFunCall : (pFunCall = new FunCallElements());
	}
	
	public ParserRule getFunCallRule() {
		return getFunCallAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
